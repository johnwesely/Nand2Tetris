// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // power of two array
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
    var int i;
    let twoToThe = Array.new(16);
    let twoToThe[0] = 1;
    let i = 1;
    while (i < 16) {
      let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
      let i = i + 1;
    }
    return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    if (x > 0) {
      return x;
    }
    else {
      return -x;
    }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
   function int multiply(int x, int y){
		var int i, ret;
		let i = 0;
		let ret = 0;
		while(i < 16){
		    if(Math.bit(y, i)) {
				let ret = ret + x;
			}
			let x = x + x;
			let i = i + 1;
		}
		return ret;
	}

    // returns true if [j]th bit of x is 1
    function boolean bit(int x, int j) {
      return ~((twoToThe[j] & x) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, ret;
      var boolean negative;

      if (x < 0 | y < 0) {
        let negative = true;
      }

      if (x < 0 & y < 0) {
        let negative = false;
      }
      
      let x = Math.abs(x);
      let y = Math.abs(y);

      if (y > x) {
        return 0;
      }
      
      let q = Math.divide(x, 2 * y);

      if ((x - ((2 * q) * y)) < y) {
        let ret = (2 * q);
      }
      else {
        let ret = ((2 * q) + 1);
      }

      if (negative) {
        return -ret;
      }
      return ret;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    var int y, j, yPlusTwoToJ;

    let x = Math.abs(x); 
    let y = 0;
    let j = 7;

    while (j > -1) {
      let yPlusTwoToJ = ((y + twoToThe[j]) * (y + twoToThe[j]));
      if ((yPlusTwoToJ < (x + 1)) & (yPlusTwoToJ > 0)) {
        let y = y + twoToThe[j];
      }
      let j = j - 1;
    }

    return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      else {
        return b;
      }
    }

    // Getter for twoToTheArray
    function int getTwoToThe(int index) {
      return twoToThe[index];
    }
}
